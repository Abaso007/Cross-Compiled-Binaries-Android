--- io.c	2022-08-31 13:15:37.000000000 -0400
+++ io.c	2022-09-05 14:38:28.899999450 -0400
@@ -2069,7 +2069,7 @@
 
 		set_sigpipe_to_default();
 
-		execl("/bin/sh", "sh", "-c", command, NULL);
+		execl("/system/bin/sh", "sh", "-c", command, NULL);
 		_exit(errno == ENOENT ? 127 : 126);
 
 	case -1:
@@ -2121,7 +2121,7 @@
 
 		signal(SIGPIPE, SIG_DFL);
 
-		execl("/bin/sh", "sh", "-c", command, NULL);
+		execl("/system/bin/sh", "sh", "-c", command, NULL);
 		_exit(errno == ENOENT ? 127 : 126);
 
 	case -1:
@@ -2460,7 +2460,7 @@
 			fatal(_("close of pipe failed: %s"), strerror(errno));
 		/* stderr does NOT get dup'ed onto child's stdout */
 		set_sigpipe_to_default();
-		execl("/bin/sh", "sh", "-c", str, NULL);
+		execl("/system/bin/sh", "sh", "-c", str, NULL);
 		_exit(errno == ENOENT ? 127 : 126);
 	}
 #endif /* NOT __MINGW32__ */
@@ -2691,7 +2691,7 @@
 		if (close(p[0]) == -1 || close(p[1]) == -1)
 			fatal(_("close of pipe failed: %s"), strerror(errno));
 		set_sigpipe_to_default();
-		execl("/bin/sh", "sh", "-c", cmd, NULL);
+		execl("/system/bin/sh", "sh", "-c", cmd, NULL);
 		_exit(errno == ENOENT ? 127 : 126);
 	}
 #endif /* NOT __MINGW32__ */
--- main.c	2022-08-31 13:15:37.000000000 -0400
+++ main.c	2022-09-05 14:39:00.009999450 -0400
@@ -269,10 +269,12 @@
 	if ((cp = getenv("GAWK_LOCALE_DIR")) != NULL)
 		locale_dir = cp;
 
-#if defined(F_GETFL) && defined(O_APPEND)
+#if defined(F_GETFL) && defined(O_APPEND) && !defined(__ANDROID__)
 	// 1/2018: This is needed on modern BSD systems so that the
 	// inplace tests pass. I think it's a bug in those kernels
 	// but let's just work around it anyway.
+	// Do not do this for Android as it interferes with SELinux,
+	// see https://github.com/termux/termux-packages/issues/2979
 	int flags = fcntl(fileno(stderr), F_GETFL, NULL);
 	if (flags >= 0 && (flags & O_APPEND) == 0) {
 		flags |= O_APPEND;
--- awklib/eg/lib/pwcat.c	2022-09-02 09:15:11.000000000 -0400
+++ awklib/eg/lib/pwcat.c	2022-09-05 14:40:17.826666115 -0400
@@ -23,6 +23,7 @@
 int
 main(int argc, char **argv)
 {
+#ifndef __ANDROID__
     struct passwd *p;
 
     while ((p = getpwent()) != NULL)
@@ -37,5 +38,6 @@
 #endif
 
     endpwent();
+#endif
     return 0;
 }
--- extension/stack.c-orig	2019-08-28 14:54:14.000000000 -0400
+++ extension/stack.c	2022-09-05 14:43:30.629999450 -0400
@@ -31,14 +31,14 @@
 
 static size_t size;
 static void **stack;
-static int index = -1;
+static int stack_index = -1;
 
 /* stack_empty --- return true if stack is empty */
 
 int
 stack_empty()
 {
-	return index < 0;
+	return stack_index < 0;
 }
 
 /* stack_top --- return top object on the stack */
@@ -49,7 +49,7 @@
 	if (stack_empty() || stack == NULL)
 		return NULL;
 
-	return stack[index];
+	return stack[stack_index];
 }
 
 /* stack_pop --- pop top object and return it */
@@ -60,7 +60,7 @@
 	if (stack_empty() || stack == NULL)
 		return NULL;
 
-	return stack[index--];
+	return stack[stack_index--];
 }
 
 /* stack_push --- push an object onto the stack */
@@ -75,7 +75,7 @@
 		if (stack == NULL)
 			return 0;
 		size = INITIAL_STACK;
-	} else if (index + 1 >= size) {
+	} else if (stack_index + 1 >= size) {
 		if (new_size < size)
 			return 0;
 		new_stack = realloc(stack, new_size * sizeof(void *));
@@ -85,6 +85,6 @@
 		stack = new_stack;
 	}
 
-	stack[++index] = object;
+	stack[++stack_index] = object;
 	return 1;
 }
